// Code generated by fastssz. DO NOT EDIT.
// Hash: 61a6e8fc511695c5275c0844ff13dbaab83f8dcfcf7eeeb6306738c3247921fb
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ExtraData object
func (e *ExtraData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the ExtraData object to a target array
func (e *ExtraData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'ExtraData'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.ExtraData)

	// Field (0) 'ExtraData'
	if size := len(e.ExtraData); size > 32 {
		err = ssz.ErrBytesLengthFn("ExtraData.ExtraData", size, 32)
		return
	}
	dst = append(dst, e.ExtraData...)

	return
}

// UnmarshalSSZ ssz unmarshals the ExtraData object
func (e *ExtraData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'ExtraData'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'ExtraData'
	{
		buf = tail[o0:]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(e.ExtraData) == 0 {
			e.ExtraData = make([]byte, 0, len(buf))
		}
		e.ExtraData = append(e.ExtraData, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ExtraData object
func (e *ExtraData) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'ExtraData'
	size += len(e.ExtraData)

	return
}

// HashTreeRoot ssz hashes the ExtraData object
func (e *ExtraData) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the ExtraData object with a hasher
func (e *ExtraData) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ExtraData'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(e.ExtraData))
		if byteLen > 32 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(e.ExtraData)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (32+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ExtraData object
func (e *ExtraData) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the LogsBloom object
func (l *LogsBloom) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the LogsBloom object to a target array
func (l *LogsBloom) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'LogsBloom'
	dst = append(dst, l.LogsBloom[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the LogsBloom object
func (l *LogsBloom) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 256 {
		return ssz.ErrSize
	}

	// Field (0) 'LogsBloom'
	copy(l.LogsBloom[:], buf[0:256])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the LogsBloom object
func (l *LogsBloom) SizeSSZ() (size int) {
	size = 256
	return
}

// HashTreeRoot ssz hashes the LogsBloom object
func (l *LogsBloom) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the LogsBloom object with a hasher
func (l *LogsBloom) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'LogsBloom'
	hh.PutBytes(l.LogsBloom[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the LogsBloom object
func (l *LogsBloom) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}
